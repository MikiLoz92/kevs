package io.kevs.event.serialization

import io.kevs.annotation.Event
import io.kevs.event.metadata.EventMetadata
import io.kevs.event.metadata.EventWithMetadata
import io.kevs.station.EventCollector
import io.kevs.station.EventDispatcher
import io.kevs.station.impl.SerializerEventStation
import io.kevs.stream.addEventListener
import io.kevs.stream.impl.DefaultEventReceiveStream
import io.kevs.stream.impl.DefaultEventTransmitStream
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.modules.plus
import kotlinx.serialization.modules.polymorphic
import kotlinx.serialization.modules.subclass
import kotlin.js.JsName
import kotlin.test.Test
import kotlin.test.assertEquals

@OptIn(ExperimentalCoroutinesApi::class)
class EventSerializationTest {

    @Event
    //@EventIdentifier("test.event")
    @Serializable
    @SerialName("test.event")
    private data class TestEvent(val someData: String)

    /**
     * This class can be autogenerated by kevs-ksp.
     */
    class KevsKspKotlinxSerializationEventSerializer(json: Json) : EventSerializer {

        private val json = Json(json) {
            serializersModule += SerializersModule {
                polymorphic(Any::class) {
                    subclass(TestEvent::class)
                }
            }
        }

        override fun serialize(ev: Any): ByteArray {
            EventWithMetadata(EventMetadata(), ev)
            return when (ev) {
                is TestEvent -> json.encodeToString(EventWithMetadata(EventMetadata(), ev)).encodeToByteArray()
                //is TestEvent -> json.encodeToString(ev).encodeToByteArray()
                else -> throw IllegalArgumentException("Event of type ${ev::class.simpleName} is not serializable.")
            }
        }

        override fun deserialize(payload: ByteArray): Any {
            return json.decodeFromString(EventWithMetadata.serializer(), payload.decodeToString()).event
            //return json.decodeFromString<TestEvent>(String(payload, Charset.defaultCharset()))
        }
    }

    @Test
    @JsName("itShouldSerializeAndDeserializeAnEvent")
    fun `it should serialize and deserialize an event`() = runTest {
        val event = TestEvent("dummy")
        val serializer = KevsKspKotlinxSerializationEventSerializer(Json)
        val dummyStation = SerializerEventStation.Companion.builder()
                .serializer(serializer)
                .build()
        val tx = DefaultEventTransmitStream.Companion.builder()
                .addDispatcher(dummyStation as EventDispatcher)
                .build()
        val rx = DefaultEventReceiveStream.Companion.builder()
                .addCollector(dummyStation as EventCollector)
                .build()

        rx.addEventListener<TestEvent> { assertEquals(it.someData, event.someData) }
        tx.sendEvent(event)
    }


}
