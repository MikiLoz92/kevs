package io.kevs.rabbitmq.ksp

import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.containingFile
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.isAnnotationPresent
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSType
import com.google.devtools.ksp.validate
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asTypeName
import com.squareup.kotlinpoet.ksp.toClassName
import com.squareup.kotlinpoet.ksp.writeTo
import io.kevs.annotation.EventIdentifier
import io.kevs.ksp.exception.KevsKspProcessingException
import io.kevs.rabbitmq.ksp.options.KevsKspRabbitMqOptions
import io.kevs.station.EventCollector
import io.kevs.station.rabbitmq.RabbitMqQueueEventCollector
import io.kevs.station.rabbitmq.annotation.ConsumerCount
import io.kevs.station.rabbitmq.annotation.ListenOnExchange
import io.kevs.station.rabbitmq.annotation.SubscribeTo
import io.kevs.station.rabbitmq.annotation.spring.WithChannelProvider
import io.kevs.station.rabbitmq.annotation.spring.WithCoroutineScopeProvider
import io.kevs.station.rabbitmq.configuration.KevsRabbitMqConfiguration
import io.kevs.station.rabbitmq.configuration.KevsRabbitMqConfigurer
import io.kevs.station.rabbitmq.io.ChannelProvider
import io.kevs.station.rabbitmq.io.CoroutineScopeProvider
import io.kevs.station.rabbitmq.subscriber.EventSubscriberSpecification
import io.kevs.stream.EventReceiveStream
import kotlinx.coroutines.CoroutineScope
import java.util.concurrent.Executors

@OptIn(KspExperimental::class)
class KevsSymbolProcessor(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger,
    private val options: KevsKspRabbitMqOptions,
) : SymbolProcessor {

    var alreadyInvoked = false

    override fun process(resolver: Resolver): List<KSAnnotated> {
        if (alreadyInvoked) return emptyList()

        val symbols = resolver.getSymbolsWithAnnotation(SubscribeTo::class.qualifiedName!!)
        buildRabbitMqAutogeneratedConfiguration(logger, resolver, symbols, options)

        alreadyInvoked = true
        return symbols.filter { !it.validate() }.toList()
    }

    private fun buildRabbitMqAutogeneratedConfiguration(
        logger: KSPLogger,
        resolver: Resolver,
        symbols: Sequence<KSAnnotated>,
        options: KevsKspRabbitMqOptions,
    ) {
        if (!options.eventCollectors.create) return
        if (!options.eventSubscribers.create) return

        FileSpec.builder("io.kevs.rabbitmq.binding", "EventBindingRegistrar")
                .addAliasedImport(KevsRabbitMqConfigurer.RabbitMqFanoutExchangeBinding::class, "Binding")
                .addType(TypeSpec.classBuilder("EventBindingRegistrar")
                                 .primaryConstructor(FunSpec.constructorBuilder().addParameter("config", KevsRabbitMqConfiguration::class).build())
                                 .addProperty(PropertySpec.builder("bindings", ClassName("kotlin.collections", "List").parameterizedBy(KevsRabbitMqConfigurer.RabbitMqFanoutExchangeBinding::class.asTypeName()))
                                                      .addModifiers(KModifier.PUBLIC)
                                                      .initializer("""mutableListOf()""")
                                                      .build())
                                 .addInitializerBlock(CodeBlock.builder().apply {
                                     for (symbol in symbols) {
                                         val eventSubscriberClass = symbol as? KSClassDeclaration ?: throw KevsKspProcessingException("Only classes can be annotated with @SubscribeTo annotation!")
                                         val eventType = symbol.annotations.first { it.shortName.asString() == SubscribeTo::class.simpleName!! }.arguments.first().value as KSType
                                         val eventIdAnnotation = eventType.declaration.getAnnotationsByType(EventIdentifier::class).singleOrNull() ?: throw KevsKspProcessingException("@EventIdentifier annotation is not repeatable!")
                                         val exchangeNames = eventType.declaration.getAnnotationsByType(ListenOnExchange::class).map { it.exchangeName }.toList()
                                         exchangeNames
                                                 .map { "\"$it\"" }
                                                 .ifEmpty { listOf("""config.defaultEventPublishingExchangeName""") }
                                                 .onEach { exchange ->
                                                     addStatement(
                                                         """(bindings·as·MutableList<Binding>).add(Binding(config.rabbitMqQueueNameGenerator("${eventSubscriberClass.toClassName().canonicalName}"),·$exchange,·"${eventIdAnnotation.id}"))""",
                                                     )
                                                 }
                                     }
                                 }.build())
                                 .build())
                .build()
                .writeTo(codeGenerator,
                    // TODO: Change deps to include event classes as well!
                         Dependencies.ALL_FILES)

        if (!options.springOptions.createConfigurationBean) return
        FileSpec.builder(options.springOptions.configurationBeanPackage, options.springOptions.configurationBeanClass)
                .addType(TypeSpec.classBuilder(ClassName(options.springOptions.configurationBeanPackage,
                                                         options.springOptions.configurationBeanClass))
                                 .addAnnotation(ClassName("org.springframework.context.annotation", "Configuration"))
                                 .addFunction(FunSpec.builder("rabbitMqEventSubscribersCoroutineScope")
                                                      .addCode(CodeBlock.of("""
                                                          return·%T(%T.newFixedThreadPool(10).%M()·+·%M())
                                                      """.trimIndent(), CoroutineScope::class, Executors::class, MemberName("kotlinx.coroutines", "asCoroutineDispatcher"), MemberName("kotlinx.coroutines", "SupervisorJob")))
                                                      .build())
                                 .addFunction(FunSpec.builder("eventBindingRegistrar")
                                                      .addParameter(ParameterSpec.builder("kevsRabbitMqConfiguration", KevsRabbitMqConfiguration::class).build())
                                                      .addAnnotation(AnnotationSpec.builder(ClassName("org.springframework.context.annotation", "Bean")).build())
                                                      .addCode("return·%T(kevsRabbitMqConfiguration)".trimIndent(), ClassName("io.kevs.rabbitmq.binding", "EventBindingRegistrar"))
                                                      .build())
                                 .addFunctions(symbols.flatMap { subscriber ->
                                     val subscriberClassname = (subscriber as? KSClassDeclaration)?.toClassName()
                                         ?: return@flatMap emptyList()
                                     val consumerCount = subscriber.getAnnotationsByType(ConsumerCount::class).singleOrNull()?.count ?: "kevsRabbitMqConfiguration.defaultEventSubscriberConsumerCount"
                                     val withChannelProvider = subscriber.isAnnotationPresent(WithChannelProvider::class)
                                     val channelProvider = if (withChannelProvider) "channelProvider" else "kevsRabbitMqConfiguration.defaultChannelProvider"
                                     val withCoroutineScopeProvider = subscriber.isAnnotationPresent(WithCoroutineScopeProvider::class)
                                     val coroutineScopeProvider = if (withCoroutineScopeProvider) "coroutineScopeProvider" else TODO()
                                     val collectorQualifierAnnotation = AnnotationSpec.builder(ClassName("org.springframework.beans.factory.annotation", "Qualifier"))
                                             .addMember(CodeBlock.of(""""${subscriber.toClassName().canonicalName}""""))
                                             .build()
                                     val eventSubscriberClass = subscriber as? KSClassDeclaration ?: throw KevsKspProcessingException("Only classes can be annotated with @SubscribeTo annotation!")
                                     val eventType = subscriber.annotations.first { it.shortName.asString() == SubscribeTo::class.simpleName!! }.arguments.first().value as KSType
                                     val channelProviderParameter = ParameterSpec.builder("channelProvider", ChannelProvider::class)
                                             .addAnnotation(AnnotationSpec.builder(ClassName("org.springframework.beans.factory.annotation", "Qualifier"))
                                                                    .addMember(""""${subscriber.getAnnotationsByType(WithChannelProvider::class).first().channelProviderBeanName}"""")
                                                                    .build())
                                             .build()
                                     val coroutineScopeProviderParameter = ParameterSpec.builder("coroutineScopeProvider", CoroutineScopeProvider::class)
                                             .addAnnotation(AnnotationSpec.builder(ClassName("org.springframework.beans.factory.annotation", "Qualifier"))
                                                                    .addMember(""""${subscriber.getAnnotationsByType(WithCoroutineScopeProvider::class).first().coroutineScopeProviderBeanName}"""")
                                                                    .build())
                                             .build()
                                     listOf(FunSpec.builder("rabbitMq${subscriberClassname.simpleName}Collector")
                                                    /*.addAnnotation(AnnotationSpec.builder(ClassName("org.springframework.context.annotation", "Bean"))
                                                                           .addMember(CodeBlock.of("""name = ["${subscriber.toClassName().canonicalName}"]"""))
                                                                           .build())*/
                                                    .returns(RabbitMqQueueEventCollector::class)
                                                    .addParameter(ParameterSpec.builder("kevsRabbitMqConfiguration", KevsRabbitMqConfiguration::class).build())
                                                    .apply {
                                                        if (withChannelProvider) addParameter(channelProviderParameter)
                                                        if (withCoroutineScopeProvider) addParameter(coroutineScopeProviderParameter)
                                                    }
                                                    .addCode(CodeBlock.builder().addNamed(
                                                        """
                                                        return %collector_type:T(
                                                            kevsRabbitMqConfiguration.rabbitMqQueueNameGenerator("${subscriber.toClassName().canonicalName}"),
                                                            kevsRabbitMqConfiguration.defaultEventSerializer,
                                                            $channelProvider.channel(%event_subscriber_specification_type:T(%subscriber_type:T::class,·$consumerCount)),
                                                            $coroutineScopeProvider.coroutineScope(%event_subscriber_specification_type:T(%subscriber_type:T::class,·$consumerCount)),
                                                        )
                                                        """.trimIndent(),
                                                        mapOf(
                                                            "collector_type" to RabbitMqQueueEventCollector::class,
                                                            "event_subscriber_specification_type" to EventSubscriberSpecification::class,
                                                            "subscriber_type" to subscriber.toClassName()
                                                        )
                                                    ).build())
                                                    .build(),
                                            FunSpec.builder("rabbitMq${subscriberClassname.simpleName}Collectors")
                                                    .addAnnotation(AnnotationSpec.builder(ClassName("org.springframework.context.annotation", "Bean"))
                                                                           .addMember(CodeBlock.of("""name = ["${subscriber.toClassName().canonicalName}"]"""))
                                                                           .build())
                                                    .returns(ClassName("kotlin.collections", "List").parameterizedBy(RabbitMqQueueEventCollector::class.asTypeName()))
                                                    /*.addParameter(ParameterSpec.builder("collectors", ClassName("kotlin.collections", "List").parameterizedBy(RabbitMqQueueEventCollector::class.asTypeName()))
                                                                          .addAnnotation(collectorQualifierAnnotation)
                                                                          .build())*/
                                                    .addParameter(ParameterSpec.builder("kevsRabbitMqConfiguration", KevsRabbitMqConfiguration::class).build())
                                                    .apply {
                                                        if (withChannelProvider) addParameter(channelProviderParameter)
                                                        if (withCoroutineScopeProvider) addParameter(coroutineScopeProviderParameter)
                                                    }
                                                    .addCode("""
                                                        return·(0·until·$consumerCount).map·{
                                                            rabbitMq${subscriberClassname.simpleName}Collector(
                                                                kevsRabbitMqConfiguration,
                                                                ${if (withChannelProvider) "channelProvider," else ""}
                                                                ${if (withCoroutineScopeProvider) "coroutineScopeProvider," else ""}
                                                            )
                                                        }
                                                        .toList()
                                                    """.trimIndent()
                                                    )
                                                    .build(),
                                            FunSpec.builder("rabbitMq${subscriberClassname.simpleName}ReceiveStream")
                                                    .addAnnotation(ClassName("org.springframework.context.annotation", "Bean"))
                                                    .returns(EventReceiveStream::class)
                                                    .addParameter(ParameterSpec.builder("kevsRabbitMqConfiguration", KevsRabbitMqConfiguration::class).build())
                                                    .addParameter(ParameterSpec.builder("subscriber", subscriberClassname).build())
                                                    .addParameter(ParameterSpec.builder("collectors", ClassName("kotlin.collections", "List").parameterizedBy(RabbitMqQueueEventCollector::class.asTypeName()))
                                                                          .addAnnotation(collectorQualifierAnnotation)
                                                                          .build())
                                                    .addCode(CodeBlock.of(
                                                        """
                                                            return·%T.builder()
                                                                    .coroutineScope(kevsRabbitMqConfiguration.defaultConsumerExecutionCoroutineScope)
                                                                    .apply·{·collectors.onEach·{·addCollector(it)·}·}
                                                                    .build()
                                                                    .also·{·it.addEventListener(%T::class,·subscriber::invoke)·}
                                                        """.trimIndent(),
                                                        ClassName("io.kevs.stream.impl", "CoroutineEventReceiveStream"),
                                                        eventType.toClassName()
                                                    ))
                                                    .build())
                                 }.asIterable())
                                 .build())
                .build()
                .writeTo(codeGenerator,
                         Dependencies(true, *symbols.map { it.containingFile!! }.toList().toTypedArray()))
    }

}